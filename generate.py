#!/usr/bin/env python3
"""
Script principal param√©trable pour la g√©n√©ration de diagrammes et documentation
Permet de sp√©cifier quels composants g√©n√©rer via des param√®tres
"""
import argparse
import subprocess
import sys
from pathlib import Path

def run_command(cmd, description):
    """Ex√©cute une commande avec gestion d'erreur"""
    print(f"‚ñ∂ {description}")
    print(f"  {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"‚ùå Erreur lors de {description}")
        print(f"Sortie d'erreur: {result.stderr}")
        return False
    else:
        print(f"‚úÖ {description} - termin√©")
        if result.stdout:
            print(f"  {result.stdout.strip()}")
        return True

def main():
    parser = argparse.ArgumentParser(
        description='G√©n√®re des diagrammes et documentation de mani√®re param√©trable',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  %(prog)s --diagrams context infrastructure  # G√©n√®re contexte et infrastructure
  %(prog)s --docs architecture security       # G√©n√®re doc architecture et s√©curit√©  
  %(prog)s --all                              # G√©n√®re tout
  %(prog)s --diagrams all                     # Tous les diagrammes seulement
        """
    )
    
    # Param√®tres g√©n√©raux
    parser.add_argument('-i', '--input', 
                      default='petstore_archi_optimized.xlsx',
                      help='Fichier Excel source (d√©faut: petstore_archi_optimized.xlsx)')
    parser.add_argument('-o', '--output-diagrams', 
                      help='R√©pertoire des diagrammes (d√©faut: generated/diagrams)')
    parser.add_argument('-d', '--output-docs', 
                      help='R√©pertoire des docs (d√©faut: generated)')
    parser.add_argument('--output-dir', 
                      help='R√©pertoire racine de sortie (remplace -o et -d)')
    
    # Options d'affichage des composants
    parser.add_argument('--exclude', nargs='*', 
                      choices=['client', 'application', 'topic', 'database'], 
                      default=[],
                      help='Types de composants √† exclure des diagrammes')
    parser.add_argument('--client-types', nargs='*',
                      choices=['EndUser', 'Partner', 'System'],
                      default=['EndUser', 'Partner', 'System'],
                      help='Types de clients √† inclure')
    
    # Options de g√©n√©ration
    parser.add_argument('--diagrams', nargs='*', 
                      choices=['context', 'overview', 'infrastructure', 'security', 'process', 'capabilities', 'all'],
                      help='Types de diagrammes √† g√©n√©rer')
    parser.add_argument('--docs', nargs='*',
                      choices=['architecture', 'executive', 'infrastructure', 'security', 'technology', 'traceability', 'all'],
                      help='Types de documentation √† g√©n√©rer')
    parser.add_argument('--all', action='store_true',
                      help='G√©n√®re tous les diagrammes et toute la documentation')
    
    # Options de nettoyage
    parser.add_argument('--clean', action='store_true',
                      help='Nettoie les r√©pertoires de sortie avant g√©n√©ration')
    
    args = parser.parse_args()
    
    # Gestion des r√©pertoires de sortie
    if args.output_dir:
        base_output = Path(args.output_dir)
        output_diagrams = base_output / 'diagrams'
        output_docs = base_output / 'docs'
    else:
        output_diagrams = Path(args.output_diagrams) if args.output_diagrams else Path('generated/diagrams')
        output_docs = Path(args.output_docs) if args.output_docs else Path('generated')
    
    # V√©rifier le fichier d'entr√©e
    input_file = Path(args.input)
    if not input_file.exists():
        print(f"‚ùå Fichier Excel non trouv√©: {input_file}")
        sys.exit(1)
    
    # Cr√©er les r√©pertoires de sortie
    output_diagrams.mkdir(parents=True, exist_ok=True)
    output_docs.mkdir(parents=True, exist_ok=True)
    
    success = True
    
    # D√©terminer ce qui doit √™tre g√©n√©r√©
    generate_all_diagrams = args.all or (args.diagrams and 'all' in args.diagrams)
    generate_all_docs = args.all or (args.docs and 'all' in args.docs)
    
    diagram_types = []
    if generate_all_diagrams:
        diagram_types = ['context', 'overview', 'infrastructure', 'security', 'process', 'capabilities']
    elif args.diagrams:
        diagram_types = args.diagrams
    
    doc_types = []
    if generate_all_docs:
        doc_types = ['architecture', 'executive', 'infrastructure', 'security', 'technology', 'traceability']
    elif args.docs:
        doc_types = args.docs
    
    # Nettoyage si demand√©
    if args.clean:
        print("üßπ Nettoyage des r√©pertoires de sortie...")
        import shutil
        if output_diagrams.exists():
            shutil.rmtree(output_diagrams)
            output_diagrams.mkdir(parents=True)
        if output_docs.exists():
            for file in output_docs.glob('*.md'):
                file.unlink()
    
    # G√©n√©ration des diagrammes
    if diagram_types:
        print(f"\nüìä G√©n√©ration des diagrammes: {', '.join(diagram_types)}")
        
        # Pr√©parer les options communes pour les g√©n√©rateurs
        generator_options = []
        if args.exclude:
            generator_options.extend(['--exclude'] + args.exclude)
        if args.client_types != ['EndUser', 'Partner', 'System']:
            generator_options.extend(['--client-types'] + args.client_types)
        
        if 'context' in diagram_types:
            cmd = ['python3', 'generators/generate_context_diagram.py', '-i', str(input_file), '-o', str(output_diagrams)] + generator_options
            success &= run_command(cmd, "Diagrammes de contexte C4")
        
        if any(t in diagram_types for t in ['overview', 'process']):
            cmd = ['python3', 'generators/generate_diagrams.py', '-i', str(input_file), '-o', str(output_diagrams)] + generator_options
            success &= run_command(cmd, "Diagrammes d'aper√ßu et processus")
        
        if any(t in diagram_types for t in ['infrastructure', 'security']):
            cmd = ['python3', 'generators/generate_infrastructure_diagrams.py', '-i', str(input_file), '-o', str(output_diagrams)] + generator_options
            success &= run_command(cmd, "Diagrammes infrastructure et s√©curit√©")
        
        if 'capabilities' in diagram_types:
            cmd = ['python3', 'generators/generate_capabilities_diagram.py', '-i', str(input_file), '-o', str(output_diagrams)]
            success &= run_command(cmd, "Diagrammes de capacit√©s et value streams")
    
    # G√©n√©ration de la documentation
    if doc_types:
        print(f"\nüìù G√©n√©ration de la documentation: {', '.join(doc_types)}")
        
        # Le script build_docs.py g√©n√®re toute la documentation
        # On peut l'appeler avec des param√®tres pour filtrer
        cmd = ['python3', 'scripts/build_docs.py', '-i', str(input_file), '-o', str(output_docs)]
        success &= run_command(cmd, "Documentation compl√®te")
        
        # Filtrage post-g√©n√©ration si n√©cessaire
        if not generate_all_docs and doc_types:
            print("üìÑ Filtrage des documents g√©n√©r√©s...")
            all_docs = {
                'architecture': ['architecture.md', 'architecture_complete.md'],
                'executive': ['executive_summary.md'],
                'infrastructure': ['infrastructure_view.md'],
                'security': ['security_view.md'],
                'technology': ['technology_view.md'],
                'traceability': ['traceability_matrix.md']
            }
            
            # Supprimer les docs non demand√©s
            for doc_type, files in all_docs.items():
                if doc_type not in doc_types:
                    for file in files:
                        file_path = output_docs / file
                        if file_path.exists():
                            file_path.unlink()
                            print(f"  üóëÔ∏è  Supprim√©: {file}")
    
    # R√©sum√© final
    print("\n" + "="*60)
    if success:
        print("‚úÖ G√©n√©ration termin√©e avec succ√®s!")
        print(f"üìä Diagrammes: {output_diagrams}")
        print(f"üìù Documents: {output_docs}")
        
        # Afficher les fichiers g√©n√©r√©s
        if output_diagrams.exists():
            diagrams = list(output_diagrams.glob('*'))
            print(f"   {len(diagrams)} diagrammes g√©n√©r√©s")
        
        if output_docs.exists():
            docs = list(output_docs.glob('*.md'))
            print(f"   {len(docs)} documents g√©n√©r√©s")
    else:
        print("‚ùå Certaines √©tapes ont √©chou√©")
        sys.exit(1)

if __name__ == '__main__':
    main()